name: Release to to PyPi and GitHub

on:
  push:
    tags:
      - "*"

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} - ${{ matrix.vers }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          #- vers: i686
          #  os: ubuntu-20.04
          #- vers: aarch64
          #  os: ubuntu-20.04
          - vers: auto64
            os: ubuntu-20.04
          - vers: arm64
            os: macos-10.15
          - vers: auto64
            os: macos-10.15
          - vers: auto64
            os: windows-2019

    env:
      SCCACHE_VERSION: 0.2.13
      CIBW_BEFORE_ALL: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y && rustup target add aarch64-apple-darwin"
      CIBW_BUILD_VERBOSITY: "1" # Make some more noise to not stall, and extra debugging.
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
      CIBW_SKIP: "cp27-* cp34-* cp35-* pp* *-win32"

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.8"

      #- name: Install Visual C++ Build Tools
      #  if: runner.os == 'Windows'
      #  run: choco install microsoft-visual-cpp-build-tools -f -y

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: wheels Linux ${{ matrix.vers }}
        if: runner.os == 'Linux'
        uses: joerick/cibuildwheel@v2.4.0
        env:
          CIBW_ARCHS_LINUX: ${{ matrix.vers }}

      - name: wheels Macos ${{ matrix.vers }}
        if: runner.os == 'Macos'
        uses: joerick/cibuildwheel@v2.4.0
        env:
          CIBW_ARCHS_MACOS: ${{ matrix.vers }}

      - name: wheels Windows ${{ matrix.vers }}
        if: runner.os == 'Windows'
        uses: joerick/cibuildwheel@v2.4.0
        env:
          CIBW_ARCHS_WINDOWS: ${{ matrix.vers }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  multiarch-build_wheels:
    name: Multiarch setuptools on ${{ matrix.platform.arch }} - ${{ matrix.python.version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [
          { version: '3.6', name: 'cp36-cp36m' },
          { version: '3.7', name: 'cp37-cp37m' },
          { version: '3.8', name: 'cp38-cp38' },
          { version: '3.9', name: 'cp39-cp39' },
          { version: '3.10', name: 'cp310-cp310' },
          { version: '3.11', name: 'cp311-cp311' },
        ]
        platform: [
          { target: "aarch64-unknown-linux-gnu", arch: "aarch64" },
          { target: "armv7-unknown-linux-gnueabihf", arch: "armv7" },
            #{ target: "s390x-unknown-linux-gnu", arch: "s390x" },
            #{ target: "powerpc64le-unknown-linux-gnu", arch: "ppc64le" },
        ]
    container:
      image: docker://messense/manylinux2014-cross:${{ matrix.platform.arch }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.platform.target }}
      - name: Build Wheels 3.6
        if: matrix.python.version == 3.6
        env:
          PLAT_NAME: manylinux2014_${{ matrix.platform.arch }}
        shell: bash -e {0}
        run: |
          PYTHON=python${{ matrix.python.version }}
          curl -sS https://bootstrap.pypa.io/pip/3.6/get-pip.py | $PYTHON
          $PYTHON -m pip install 'crossenv>=1.1.2'
          $PYTHON -m crossenv /opt/python/${{ matrix.python.name }}/bin/python3 --cc $TARGET_CC --cxx $TARGET_CXX --sysroot $TARGET_SYSROOT --env LIBRARY_PATH= .venv
          source .venv/bin/activate
          build-pip install -U pip wheel setuptools-rust setuptools
          pip install -U pip wheel setuptools-rust setuptools
          export PYO3_CROSS_LIB_DIR="$PWD/.venv/lib"
          python setup.py bdist_wheel --dist-dir ./wheelhouse/
      - name: Build Wheels 3.7-3.10
        if: matrix.python.version != 3.6
        env:
          PLAT_NAME: manylinux2014_${{ matrix.platform.arch }}
        shell: bash -e {0}
        run: |
          PYTHON=python${{ matrix.python.version }}
          curl -sS https://bootstrap.pypa.io/get-pip.py | $PYTHON
          $PYTHON -m pip install 'crossenv>=1.1.2'
          $PYTHON -m crossenv /opt/python/${{ matrix.python.name }}/bin/python3 --cc $TARGET_CC --cxx $TARGET_CXX --sysroot $TARGET_SYSROOT --env LIBRARY_PATH= .venv
          source .venv/bin/activate
          build-pip install -U pip wheel setuptools-rust setuptools
          pip install -U pip wheel setuptools-rust setuptools
          export PYO3_CROSS_LIB_DIR="$PWD/.venv/lib"
          cp distutils-sysconfig-patch.py .venv/lib/distutils-sysconfig-patch.py
          python setup.py bdist_wheel --dist-dir ./wheelhouse/
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.8"

      - name: Build sdist
        run: |
          python -m pip install setuptools-rust setuptools wheel
          python setup.py sdist
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  release:
    needs: [build_wheels, build_sdist, multiarch-build_wheels]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: target/wheels/lavasnek_rs*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
